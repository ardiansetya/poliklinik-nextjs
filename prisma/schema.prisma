// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  PASIEN
  DOKTER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          Role      @default(PASIEN)
  no_hp         String?
  alamat        String?
  no_ktp        String? 
  no_rm         String?
  id_poli       String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // relasi dengan DaftarPoli
  daftarPoliPasien DaftarPoli[]

  // relasi dengan JadwalPeriksa
  jadwalPeriksaDokter JadwalPeriksa[] @relation("JadwalPeriksaDokter")

  // relasi dengan Poli
  poli Poli? @relation(fields: [id_poli], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
  
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model DaftarPoli {
  id         String @id @default(cuid())
  id_pasien  String
  id_jadwal  String
  keluhan    String
  no_antrian Int

  pasien  User          @relation(fields: [id_pasien], references: [id])
  jadwal  JadwalPeriksa @relation(fields: [id_jadwal], references: [id])
  periksa Periksa[]

  @@map("daftar_poli")
}

model JadwalPeriksa {
  id          String   @id @default(cuid())
  id_dokter   String
  hari        String
  jam_mulai   DateTime
  jam_selesai DateTime

  jadwalPeriksaDokter DaftarPoli[]

  dokter User @relation("JadwalPeriksaDokter", fields: [id_dokter], references: [id])

  @@map("jadwal_periksa")
}

model Poli {
  id         String @id @default(cuid())
  nama_poli  String
  keterangan String

  dokterList User[]

  @@map("poli")
}

model Periksa {
  id             String   @id @default(cuid())
  id_daftar_poli String
  tgl_periksa    DateTime
  catatan        String?
  biaya          Int

  detailPeriksa DetailPeriksa[]

  daftarPoli DaftarPoli @relation(fields: [id_daftar_poli], references: [id])

  @@map("periksa")
}

model DetailPeriksa {
  id         String @id @default(cuid())
  id_periksa String
  id_obat    String

  periksa Periksa @relation(fields: [id_periksa], references: [id])
  obat    Obat    @relation(fields: [id_obat], references: [id])

  @@map("detail_periksa")
}

model Obat {
  id        String @id @default(cuid())
  nama_obat String
  kemasan   String
  harga     Int

  detailPeriksa DetailPeriksa[]

  @@map("obat")
}
